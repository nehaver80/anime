{"ast":null,"code":"var _jsxFileName = \"H:\\\\anime\\\\src\\\\Components\\\\AnimeList.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AnimeList = _ref => {\n  let {\n    animelist,\n    setAnimeInfo,\n    animeComponent,\n    handleList\n  } = _ref;\n  const AddToList = animeComponent;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: animelist ? animelist.map((anime, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        onClick: () => setAnimeInfo(anime),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: anime.images.jpg.large_image_url,\n          alt: \"animeImage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"anime-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: anime.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"overlay\",\n            onClick: () => handleList(anime),\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: anime.title_japanese\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 16,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"SYNOPSIS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 17,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"synopsis\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: anime.synopsis\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 19,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 18,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(AddToList, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 17\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 15\n      }, this);\n    }) : \"Not Found\"\n  }, void 0, false);\n};\n_c = AnimeList;\nvar _c;\n$RefreshReg$(_c, \"AnimeList\");","map":{"version":3,"names":["React","AnimeList","animelist","setAnimeInfo","animeComponent","handleList","AddToList","map","anime","index","images","jpg","large_image_url","title","title_japanese","synopsis"],"sources":["H:/anime/src/Components/AnimeList.js"],"sourcesContent":["import React from 'react'\n\nexport const AnimeList = ({ animelist,setAnimeInfo,animeComponent,handleList}) => {\n  const AddToList=animeComponent;\n  return (\n    <>\n      {\n        animelist ? (\n          animelist.map((anime, index) => {\n            return (\n              <div className=\"card\" key={index} onClick={()=>setAnimeInfo(anime)}>\n                <img src={anime.images.jpg.large_image_url} alt=\"animeImage\" />\n                <div className=\"anime-info\">\n                  <h4>{anime.title}</h4>\n                  <div className=\"overlay\" onClick={()=>handleList(anime)}>\n                      <h4>{anime.title_japanese}</h4>\n                      <h3>SYNOPSIS</h3>\n                      <div className=\"synopsis\">\n                        <p>{anime.synopsis}</p>\n                      </div>\n                      <AddToList/>\n                  </div>\n\n                </div>\n              </div>\n            )\n          })\n        ) : \"Not Found\"\n      }\n\n    </>\n  )\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA;AAAA;AAEzB,OAAO,MAAMC,SAAS,GAAG,QAAyD;EAAA,IAAxD;IAAEC,SAAS;IAACC,YAAY;IAACC,cAAc;IAACC;EAAU,CAAC;EAC3E,MAAMC,SAAS,GAACF,cAAc;EAC9B,oBACE;IAAA,UAEIF,SAAS,GACPA,SAAS,CAACK,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;MAC9B,oBACE;QAAK,SAAS,EAAC,MAAM;QAAa,OAAO,EAAE,MAAIN,YAAY,CAACK,KAAK,CAAE;QAAA,wBACjE;UAAK,GAAG,EAAEA,KAAK,CAACE,MAAM,CAACC,GAAG,CAACC,eAAgB;UAAC,GAAG,EAAC;QAAY;UAAA;UAAA;UAAA;QAAA,QAAG,eAC/D;UAAK,SAAS,EAAC,YAAY;UAAA,wBACzB;YAAA,UAAKJ,KAAK,CAACK;UAAK;YAAA;YAAA;YAAA;UAAA,QAAM,eACtB;YAAK,SAAS,EAAC,SAAS;YAAC,OAAO,EAAE,MAAIR,UAAU,CAACG,KAAK,CAAE;YAAA,wBACpD;cAAA,UAAKA,KAAK,CAACM;YAAc;cAAA;cAAA;cAAA;YAAA,QAAM,eAC/B;cAAA,UAAI;YAAQ;cAAA;cAAA;cAAA;YAAA,QAAK,eACjB;cAAK,SAAS,EAAC,UAAU;cAAA,uBACvB;gBAAA,UAAIN,KAAK,CAACO;cAAQ;gBAAA;gBAAA;gBAAA;cAAA;YAAK;cAAA;cAAA;cAAA;YAAA,QACnB,eACN,QAAC,SAAS;cAAA;cAAA;cAAA;YAAA,QAAE;UAAA;YAAA;YAAA;YAAA;UAAA,QACV;QAAA;UAAA;UAAA;UAAA;QAAA,QAEF;MAAA,GAbmBN,KAAK;QAAA;QAAA;QAAA;MAAA,QAc1B;IAEV,CAAC,CAAC,GACA;EAAW,iBAGhB;AAEP,CAAC;AAAA,KA9BYR,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}